server:
  port: 8083

spring:
  datasource:
    url: jdbc:postgresql://${POSTGRES_URI:localhost:5433}/driver_service_db
    username: ${POSTGRES_USERNAME:postgres}
    password: ${POSTGRES_PASSWORD:postgres}
  jpa:
    open-in-view: false
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  application:
    name: driver-service
  rabbitmq:
    host: ${RABBIT_HOST:localhost}
    username: ${RABBIT_USERNAME:guest}
    password: ${RABBIT_PASSWORD:guest}
    port: ${RABBIT_PORT:5672}
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_RESOURCESERVER_JWT_ISSUER_URI:http://localhost:9082/realms/taxi-app-realm}
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

springdoc:
  api-docs:
    path: /driver-service-docs/v3/api-docs
    enabled: true
  swagger-ui:
    path: /driver-service-docs/swagger-ui
    enabled: true

rabbitmq:
  exchanges:
    callback: "auth.callback.exchange"
    rollback: "auth.rollback.exchange"
  queues:
    driverCreated: "driver-created-queue"
  keys:
    userCallback: "user.callback"
    userRollback: "user.rollback"

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://${EUREKA_URI:localhost:8761}/eureka/

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
  prometheus:
    metrics:
      export:
        enabled: true

openapi:
  server:
    url: http://localhost:8083
    description: Driver service
  contact:
    name: Artsem Maiseyenka
    email: artsem.maiseyenka@gmail.com
  info:
    title: Driver Service
    version: 1.0
    description: This API exposes endpoints to manage drivers and cars
